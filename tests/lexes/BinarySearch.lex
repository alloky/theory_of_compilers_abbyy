CLASS class
ID BinarySearch
LPARBR {
PUBLIC public
STATIC static
VOID void
ID main
LPAREN (
ID String
LPARSQ [
RPARSQ ]
ID a
RPAREN )
LPARBR {
ID System
DOT .
ID out
DOT .
ID println
LPAREN (
NEW new
ID BS
LPAREN (
RPAREN )
DOT .
ID Start
LPAREN (
NUMBER 20
RPAREN )
RPAREN )
SEMICOL ;
RPARBR }
RPARBR }
CLASS class
ID BS
LPARBR {
INT int
LPARSQ [
RPARSQ ]
ID number
SEMICOL ;
INT int
ID size
SEMICOL ;
PUBLIC public
INT int
ID Start
LPAREN (
INT int
ID sz
RPAREN )
LPARBR {
INT int
ID aux01
SEMICOL ;
INT int
ID aux02
SEMICOL ;
ID aux01
EQ =
THIS this
DOT .
ID Init
LPAREN (
ID sz
RPAREN )
SEMICOL ;
ID aux02
EQ =
THIS this
DOT .
ID Print
LPAREN (
RPAREN )
SEMICOL ;
IF if
LPAREN (
THIS this
DOT .
ID Search
LPAREN (
NUMBER 8
RPAREN )
RPAREN )
ID System
DOT .
ID out
DOT .
ID println
LPAREN (
NUMBER 1
RPAREN )
SEMICOL ;
ELSE else
ID System
DOT .
ID out
DOT .
ID println
LPAREN (
NUMBER 0
RPAREN )
SEMICOL ;
IF if
LPAREN (
THIS this
DOT .
ID Search
LPAREN (
NUMBER 19
RPAREN )
RPAREN )
ID System
DOT .
ID out
DOT .
ID println
LPAREN (
NUMBER 1
RPAREN )
SEMICOL ;
ELSE else
ID System
DOT .
ID out
DOT .
ID println
LPAREN (
NUMBER 0
RPAREN )
SEMICOL ;
IF if
LPAREN (
THIS this
DOT .
ID Search
LPAREN (
NUMBER 20
RPAREN )
RPAREN )
ID System
DOT .
ID out
DOT .
ID println
LPAREN (
NUMBER 1
RPAREN )
SEMICOL ;
ELSE else
ID System
DOT .
ID out
DOT .
ID println
LPAREN (
NUMBER 0
RPAREN )
SEMICOL ;
IF if
LPAREN (
THIS this
DOT .
ID Search
LPAREN (
NUMBER 21
RPAREN )
RPAREN )
ID System
DOT .
ID out
DOT .
ID println
LPAREN (
NUMBER 1
RPAREN )
SEMICOL ;
ELSE else
ID System
DOT .
ID out
DOT .
ID println
LPAREN (
NUMBER 0
RPAREN )
SEMICOL ;
IF if
LPAREN (
THIS this
DOT .
ID Search
LPAREN (
NUMBER 37
RPAREN )
RPAREN )
ID System
DOT .
ID out
DOT .
ID println
LPAREN (
NUMBER 1
RPAREN )
SEMICOL ;
ELSE else
ID System
DOT .
ID out
DOT .
ID println
LPAREN (
NUMBER 0
RPAREN )
SEMICOL ;
IF if
LPAREN (
THIS this
DOT .
ID Search
LPAREN (
NUMBER 38
RPAREN )
RPAREN )
ID System
DOT .
ID out
DOT .
ID println
LPAREN (
NUMBER 1
RPAREN )
SEMICOL ;
ELSE else
ID System
DOT .
ID out
DOT .
ID println
LPAREN (
NUMBER 0
RPAREN )
SEMICOL ;
IF if
LPAREN (
THIS this
DOT .
ID Search
LPAREN (
NUMBER 39
RPAREN )
RPAREN )
ID System
DOT .
ID out
DOT .
ID println
LPAREN (
NUMBER 1
RPAREN )
SEMICOL ;
ELSE else
ID System
DOT .
ID out
DOT .
ID println
LPAREN (
NUMBER 0
RPAREN )
SEMICOL ;
IF if
LPAREN (
THIS this
DOT .
ID Search
LPAREN (
NUMBER 50
RPAREN )
RPAREN )
ID System
DOT .
ID out
DOT .
ID println
LPAREN (
NUMBER 1
RPAREN )
SEMICOL ;
ELSE else
ID System
DOT .
ID out
DOT .
ID println
LPAREN (
NUMBER 0
RPAREN )
SEMICOL ;
RETURN return
NUMBER 999
SEMICOL ;
RPARBR }
PUBLIC public
ID boolean
ID Search
LPAREN (
INT int
ID num
RPAREN )
LPARBR {
ID boolean
ID bs01
SEMICOL ;
INT int
ID right
SEMICOL ;
INT int
ID left
SEMICOL ;
ID boolean
ID var_cont
SEMICOL ;
INT int
ID medium
SEMICOL ;
INT int
ID aux01
SEMICOL ;
INT int
ID nt
SEMICOL ;
ID aux01
EQ =
NUMBER 0
SEMICOL ;
ID bs01
EQ =
ID false
SEMICOL ;
ID right
EQ =
ID number
DOT .
ID length
SEMICOL ;
ID right
EQ =
ID right
MINUS -
NUMBER 1
SEMICOL ;
ID left
EQ =
NUMBER 0
SEMICOL ;
ID var_cont
EQ =
ID true
SEMICOL ;
WHILE while
LPAREN (
ID var_cont
RPAREN )
LPARBR {
ID medium
EQ =
ID left
PLUS +
ID right
SEMICOL ;
ID medium
EQ =
THIS this
DOT .
ID Div
LPAREN (
ID medium
RPAREN )
SEMICOL ;
ID aux01
EQ =
ID number
LPARSQ [
ID medium
RPARSQ ]
SEMICOL ;
IF if
LPAREN (
ID num
LESS <
ID aux01
RPAREN )
ID right
EQ =
ID medium
MINUS -
NUMBER 1
SEMICOL ;
ELSE else
ID left
EQ =
ID medium
PLUS +
NUMBER 1
SEMICOL ;
IF if
LPAREN (
THIS this
DOT .
ID Compare
LPAREN (
ID aux01
COMMA ,
ID num
RPAREN )
RPAREN )
ID var_cont
EQ =
ID false
SEMICOL ;
ELSE else
ID var_cont
EQ =
ID true
SEMICOL ;
IF if
LPAREN (
ID right
LESS <
ID left
RPAREN )
ID var_cont
EQ =
ID false
SEMICOL ;
ELSE else
ID nt
EQ =
NUMBER 0
SEMICOL ;
RPARBR }
IF if
LPAREN (
THIS this
DOT .
ID Compare
LPAREN (
ID aux01
COMMA ,
ID num
RPAREN )
RPAREN )
ID bs01
EQ =
ID true
SEMICOL ;
ELSE else
ID bs01
EQ =
ID false
SEMICOL ;
RETURN return
ID bs01
SEMICOL ;
RPARBR }
PUBLIC public
INT int
ID Div
LPAREN (
INT int
ID num
RPAREN )
LPARBR {
INT int
ID count01
SEMICOL ;
INT int
ID count02
SEMICOL ;
INT int
ID aux03
SEMICOL ;
ID count01
EQ =
NUMBER 0
SEMICOL ;
ID count02
EQ =
NUMBER 0
SEMICOL ;
ID aux03
EQ =
ID num
MINUS -
NUMBER 1
SEMICOL ;
WHILE while
LPAREN (
ID count02
LESS <
ID aux03
RPAREN )
LPARBR {
ID count01
EQ =
ID count01
PLUS +
NUMBER 1
SEMICOL ;
ID count02
EQ =
ID count02
PLUS +
NUMBER 2
SEMICOL ;
RPARBR }
RETURN return
ID count01
SEMICOL ;
RPARBR }
PUBLIC public
ID boolean
ID Compare
LPAREN (
INT int
ID num1
COMMA ,
INT int
ID num2
RPAREN )
LPARBR {
ID boolean
ID retval
SEMICOL ;
INT int
ID aux02
SEMICOL ;
ID retval
EQ =
ID false
SEMICOL ;
ID aux02
EQ =
ID num2
PLUS +
NUMBER 1
SEMICOL ;
IF if
LPAREN (
ID num1
LESS <
ID num2
RPAREN )
ID retval
EQ =
ID false
SEMICOL ;
ELSE else
IF if
LPAREN (
NOT !
LPAREN (
ID num1
LESS <
ID aux02
RPAREN )
RPAREN )
ID retval
EQ =
ID false
SEMICOL ;
ELSE else
ID retval
EQ =
ID true
SEMICOL ;
RETURN return
ID retval
SEMICOL ;
RPARBR }
PUBLIC public
INT int
ID Print
LPAREN (
RPAREN )
LPARBR {
INT int
ID j
SEMICOL ;
ID j
EQ =
NUMBER 1
SEMICOL ;
WHILE while
LPAREN (
ID j
LESS <
LPAREN (
ID size
RPAREN )
RPAREN )
LPARBR {
ID System
DOT .
ID out
DOT .
ID println
LPAREN (
ID number
LPARSQ [
ID j
RPARSQ ]
RPAREN )
SEMICOL ;
ID j
EQ =
ID j
PLUS +
NUMBER 1
SEMICOL ;
RPARBR }
ID System
DOT .
ID out
DOT .
ID println
LPAREN (
NUMBER 99999
RPAREN )
SEMICOL ;
RETURN return
NUMBER 0
SEMICOL ;
RPARBR }
PUBLIC public
INT int
ID Init
LPAREN (
INT int
ID sz
RPAREN )
LPARBR {
INT int
ID j
SEMICOL ;
INT int
ID k
SEMICOL ;
INT int
ID aux02
SEMICOL ;
INT int
ID aux01
SEMICOL ;
ID size
EQ =
ID sz
SEMICOL ;
ID number
EQ =
NEW new
INT int
LPARSQ [
ID sz
RPARSQ ]
SEMICOL ;
ID j
EQ =
NUMBER 1
SEMICOL ;
ID k
EQ =
ID size
PLUS +
NUMBER 1
SEMICOL ;
WHILE while
LPAREN (
ID j
LESS <
LPAREN (
ID size
RPAREN )
RPAREN )
LPARBR {
ID aux01
EQ =
NUMBER 2
TIMES *
ID j
SEMICOL ;
ID aux02
EQ =
ID k
MINUS -
NUMBER 3
SEMICOL ;
ID number
LPARSQ [
ID j
RPARSQ ]
EQ =
ID aux01
PLUS +
ID aux02
SEMICOL ;
ID j
EQ =
ID j
PLUS +
NUMBER 1
SEMICOL ;
ID k
EQ =
ID k
MINUS -
NUMBER 1
SEMICOL ;
RPARBR }
RETURN return
NUMBER 0
SEMICOL ;
RPARBR }
RPARBR }
